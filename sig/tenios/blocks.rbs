module Tenios
  class Blocks
    type block = Tenios::Blocks::Announcement
               | Tenios::Blocks::Bridge
               | Tenios::Blocks::CallSettings
               | Tenios::Blocks::CollectDigits
               | Tenios::Blocks::CollectSpeech
               | Tenios::Blocks::HangUp
               | Tenios::Blocks::RoutingPlan
               | Tenios::Blocks::Say

    def initialize: () { (block) -> void } -> Blocks

    def add: (block block) -> Blocks

    def announce: (announcement: String announcement, ?standard: bool standard) -> Blocks

    def bridge: (mode: String mode, ?timeout: Integer? timeout) { (Bridge) -> void } -> Blocks

    def call_settings: (forward_ani: String forward_ani) -> Blocks

    def collect_digits: (
      announcement: String announcement,
      standard_announcement: bool standard_announcement,
      error_announcement: String error_announcement,
      standard_error_announcement: (TrueClass | FalseClass) standard_error_announcement,
      variable: String variable,
      min_digits: Integer min_digits,
      max_digits: Integer max_digits,
      terminator: String terminator,
      max_tries: Integer max_tries,
      timeout: Integer timeout
    ) -> Blocks

    def collect_speech: (
      announcement: String announcement,
      missing_input_announcement: (TrueClass | FalseClass) missing_input_announcement,
      language: String language,
      variable: String variable,
      max_tries: Integer max_tries
    ) -> Blocks

    def hang_up: (cause: String cause) -> Blocks

    def routing_plan: (routing_plan: String routing_plan) -> Blocks

    def say: (text: String text, voice: String voice, ssml: bool ssml) -> Blocks

    def as_json: () -> { blocks: Array[untyped] }
  end
end
